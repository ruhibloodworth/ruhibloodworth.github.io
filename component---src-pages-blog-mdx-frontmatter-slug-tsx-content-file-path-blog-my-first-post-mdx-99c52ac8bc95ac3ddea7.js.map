{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-tsx-content-file-path-blog-my-first-post-mdx-99c52ac8bc95ac3ddea7.js","mappings":"4MAiCO,MAAMA,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAG3C,OAAO,WAAc,IAEO,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,IAChC,CAACC,EAAmBD,GACzB,CC3EA,SAASE,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,KACFC,IAAsBN,EAAMH,YAC/B,OAAOU,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,yHAA0H,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,gBAAiBG,EAAAA,cAAoBN,EAAYI,EAAG,CACrTG,KAAM,6BACL,UAAW,QAASD,EAAAA,cAAoBN,EAAYI,EAAG,CACxDG,KAAM,4BACL,cAAe,KACpB,CAKA,MAJA,SAAoBR,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,EAAGG,IAAsBN,EAAMH,YAC3E,OAAOa,EAAYH,EAAAA,cAAoBG,EAAWV,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oBCbA,MAAMW,EAAWC,IACf,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,OAAOL,EAAAA,cAAoBQ,EAAAA,EAAQ,KAAMR,EAAAA,cAAoB,UAAW,KAAMA,EAAAA,cAAoB,KAAM,KAAMM,EAAKG,IAAIC,YAAYC,OAAQX,EAAAA,cAAoB,OAAQ,KAAMM,EAAKG,IAAIC,YAAYE,MAAOL,GAAU,EAGxMM,EAAOC,IAClB,IAAI,KAACR,GAAQQ,EACb,OAAOd,EAAAA,cAAoBe,EAAAA,EAAK,CAC9BJ,MAAOL,EAAKG,IAAIC,YAAYC,OAC5B,EAGW,SAASK,EAAiBvB,GACvC,OAAOO,EAAAA,cAAoBI,EAAUX,EAAOO,EAAAA,cAAoBiB,EAAqBxB,GACvF,C,+CCSA,IAvBwDY,IAAmB,IAAlB,SAAEE,GAAU,EACnE,MAAMD,GAAOY,EAAAA,EAAAA,IAAe,cAS5B,OACElB,EAAAA,cAAAA,MAAAA,CAAKmB,UAAU,iBACbnB,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAACoB,EAAAA,GAAI,CAACC,GAAG,KACPrB,EAAAA,cAAAA,KAAAA,KAAKM,EAAKgB,KAAKC,aAAaZ,SAGhCX,EAAAA,cAAAA,OAAAA,KAAOO,GACPP,EAAAA,cAAAA,SAAAA,KAAQ,0BACJ,C,+CCAV,IApB0CK,IAAgB,IAAf,MAAEM,GAAO,EAClD,MAAML,GAAOY,EAAAA,EAAAA,IAAe,cAU5B,OACElB,EAAAA,cAAAA,QAAAA,KACGW,EACMA,EAAK,MAAML,EAAKgB,KAAKC,aAAaZ,MACrCL,EAAKgB,KAAKC,aAAaZ,MACrB,C","sources":["webpack://ruhi-bloodworth/./node_modules/@mdx-js/react/lib/index.js","webpack://ruhi-bloodworth/./blog/my-first-post.mdx","webpack://ruhi-bloodworth/./src/pages/blog/{mdx.frontmatter__slug}.tsx","webpack://ruhi-bloodworth/./src/components/layout.tsx","webpack://ruhi-bloodworth/./src/components/seo.tsx"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"This isn't finished but it is a beginning. I still need to style and write but I want to get something out on screen.\"), \"\\n\", React.createElement(_components.p, null, \"Created with \", React.createElement(_components.a, {\n    href: \"https://www.gatsbyjs.com/\"\n  }, \"gatsby\"), \" and \", React.createElement(_components.a, {\n    href: \"https://open-props.style\"\n  }, \"open props\"), \".\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/ruhib/dev/ruhibloodworth.github.io/blog/my-first-post.mdx\";\nimport * as React from \"react\";\nimport Layout from \"../../components/layout\";\nimport Seo from \"../../components/seo\";\nconst BlogPost = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(Layout, null, React.createElement(\"article\", null, React.createElement(\"h2\", null, data.mdx.frontmatter.title), React.createElement(\"time\", null, data.mdx.frontmatter.date), children));\n};\nconst query = \"1083539204\";\nexport const Head = _ref2 => {\n  let {data} = _ref2;\n  return React.createElement(Seo, {\n    title: data.mdx.frontmatter.title\n  });\n};\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from \"react\";\nimport { Link, graphql, useStaticQuery } from \"gatsby\";\nimport \"./main.css\";\n\nconst Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n  return (\n    <div className=\"doc-container\">\n      <header>\n        <Link to=\"/\">\n          <h1>{data.site.siteMetadata.title}</h1>\n        </Link>\n      </header>\n      <main>{children}</main>\n      <footer>© 2023 Ruhi Bloodworth</footer>\n    </div>\n  );\n};\n\nexport default Layout;\n","import * as React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nconst Seo: React.FC<{ title?: string }> = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <title>\n      {title\n        ? `${title} | ${data.site.siteMetadata.title}`\n        : data.site.siteMetadata.title}\n    </title>\n  );\n};\n\nexport default Seo;\n"],"names":["MDXContext","useMDXComponents","components","contextComponents","_createMdxContent","props","_components","Object","assign","p","a","_provideComponents","React","href","wrapper","MDXLayout","BlogPost","_ref","data","children","Layout","mdx","frontmatter","title","date","Head","_ref2","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","useStaticQuery","className","Link","to","site","siteMetadata"],"sourceRoot":""}